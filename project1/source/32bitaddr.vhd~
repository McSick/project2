library ieee;
use ieee.std_logic_1164.all;
entity 32bitaddr is
	port( A : in std_logic_vector(31 downto 0);
	      B : in std_logic_vector(31 downto 0);
	      SUM : out std_logic_vector(31 downto 0);
	      V : out std_logic);
end 32bitaddr;
architecture COMBINATIONAL of 32bitaddr is
	signal couts : std_logic_vector(31 downto 0); --Couts of each addr
	signal internal_sum : std_logic_vector(31 downto 0); -- internal sum register
	
	
begin
	--init bit
	1bitaddr port map( A=> A(0),
			   B => B(0),
			   Cin => 0,
			   Cout => couts(0),
			   SUM => internal_sum(0)); 
	--bits 1-31
	for i in 1 to 31 loop
		1bitaddr port map( A => A(i),
				   B => B(i),
				   Cin => couts(i-1),
				   Cout => couts(i),
				   SUM => internal_sum(i));
	
	end loop;
		
	V <= couts(31) xor couts(30); --overflow
	SUM <= internal_sum; --signed sum

end COMBINATIONAl;
